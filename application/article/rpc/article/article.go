// Code generated by goctl. DO NOT EDIT.
// Source: article.proto

package article

import (
	"context"

	"beyond/application/article/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ArticleItem  = pb.ArticleItem
	ArticlesReq  = pb.ArticlesReq
	ArticlesResp = pb.ArticlesResp
	PublishReq   = pb.PublishReq
	PublishResp  = pb.PublishResp

	Article interface {
		Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
		Articles(ctx context.Context, in *ArticlesReq, opts ...grpc.CallOption) (*ArticlesResp, error)
	}

	defaultArticle struct {
		cli zrpc.Client
	}
)

func NewArticle(cli zrpc.Client) Article {
	return &defaultArticle{
		cli: cli,
	}
}

func (m *defaultArticle) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	client := pb.NewArticleClient(m.cli.Conn())
	return client.Publish(ctx, in, opts...)
}

func (m *defaultArticle) Articles(ctx context.Context, in *ArticlesReq, opts ...grpc.CallOption) (*ArticlesResp, error) {
	client := pb.NewArticleClient(m.cli.Conn())
	return client.Articles(ctx, in, opts...)
}
